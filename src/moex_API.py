import requests


class MoexAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ú–æ—Å–±–∏—Ä–∂–∏"""

    def __init__(self):
        self.url = "https://iss.moex.com/iss/engines/stock/markets/shares/securities/"
        self.headers = {'User-Agent': 'HH-User-Agent'}

    def get_trading_status(self, ticker):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤."""
        url = self.url + f"{ticker}.json"
        response = requests.get(url, headers=self.headers)
        data = response.json()
        stock_data = data.get('marketdata', {}).get('data', [])

        if not stock_data:
            return None, f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã."

        columns = data['marketdata']['columns']
        try:
            tradingstatus_index = columns.index('TRADINGSTATUS')
            boardid_index = columns.index('BOARDID')
        except ValueError:
            return None, f"–ê–∫—Ü–∏—è {ticker}: –æ–¥–Ω–∞ –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö."

        for entry in stock_data:
            if len(entry) > tradingstatus_index and entry[boardid_index] == "TQRB":
                return entry[tradingstatus_index], None
            elif len(entry) > tradingstatus_index and entry[boardid_index] == "SMAL":
                return entry[tradingstatus_index], None
            elif len(entry) > tradingstatus_index and entry[boardid_index] == "SPEQ":
                return entry[tradingstatus_index], None

        return None, f"–ê–∫—Ü–∏—è {ticker}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤ –∏–∑ TQRB, SMAL, SPEQ."

    def get_last_price(self, ticker):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã (LAST)."""
        url = self.url + f"{ticker}.json"
        response = requests.get(url, headers=self.headers)
        data = response.json()
        stock_data = data.get('marketdata', {}).get('data', [])

        if not stock_data:
            return None, f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã."

        columns = data['marketdata']['columns']
        try:
            last_index = columns.index('LAST')
            boardid_index = columns.index('BOARDID')
        except ValueError:
            return None, f"–ê–∫—Ü–∏—è {ticker}: –æ–¥–Ω–∞ –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö."

        for entry in stock_data:
            if len(entry) > last_index and entry[boardid_index] == "TQBR" and entry[last_index] is not None:
                return entry[last_index], None
            elif len(entry) > last_index and entry[boardid_index] == "SMAL" and entry[last_index] is not None:
                return entry[last_index], None
            elif len(entry) > last_index and entry[boardid_index] == "SPEQ" and entry[last_index] is not None:
                return entry[last_index], None

        return None, f"–ê–∫—Ü–∏—è {ticker}: —Ü–µ–Ω–∞ LAST –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    def get_close_price(self, ticker):
        """"–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è (CLOSE)."""
        url = self.url + f"{ticker}.json"
        response = requests.get(url, headers=self.headers)
        data = response.json()
        stock_data = data.get('marketdata', {}).get('data', [])

        if not stock_data:
            return None, f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        columns = data['marketdata']['columns']
        try:
            close_index = columns.index('CLOSEPRICE')
            boardid_index = columns.index('BOARDID')
        except ValueError:
            return None, f"–ê–∫—Ü–∏—è {ticker}: –æ–¥–Ω–∞ –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö."

        for entry in stock_data:
            if len(entry) > close_index and entry[boardid_index] == "TQBR" and entry[close_index] is not None:
                return entry[close_index], None
            if len(entry) > close_index and entry[boardid_index] == "SMAL" and entry[close_index] is not None:
                return entry[close_index], None
            if len(entry) > close_index and entry[boardid_index] == "SPEQ" and entry[close_index] is not None:
                return entry[close_index], None

        return None, f"–ê–∫—Ü–∏—è {ticker}: —Ü–µ–Ω–∞ CLOSE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    def get_stock_info(self, ticker):
        """–ú–µ—Ç–æ–¥ —Å–æ–±–∏—Ä–∞—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ—Ä–≥–æ–≤, —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ, –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏."""
        status, status_error = self.get_trading_status(ticker)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤
        name_company = self.get_name_company(ticker)

        if status_error:
            return status_error

        if status == "N":
            last_price, last_error = self.get_last_price(ticker)
            close_price, close_error = self.get_close_price(ticker)

            if last_error and close_error:
                return f"{name_company}: —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            elif not last_error:
                return f"{name_company} | —Ç–æ—Ä–≥–∏ ‚õîÔ∏è: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {last_price} —Ä—É–±."
            elif not close_error:
                return f"{name_company} | —Ç–æ—Ä–≥–∏ ‚õîÔ∏è: —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {close_price} —Ä—É–±."
        if status != "N":
            last_price, last_error = self.get_last_price(ticker)
            close_price, close_error = self.get_close_price(ticker)
            if last_error and close_error:
                return f"{name_company} | —Ç–æ—Ä–≥–∏ üëç: –Ω–∏ LAST, –Ω–∏ CLOSE —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            elif not last_error:
                return f"{name_company} | —Ç–æ—Ä–≥–∏ üëç: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {last_price} —Ä—É–±."
            elif not close_error:
                return f"{name_company} | —Ç–æ—Ä–≥–∏ üëç: —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {close_price} —Ä—É–±."

    def get_name_company(self, ticker):
        """–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞—é—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        url = self.url + f"{ticker}.json"
        response = requests.get(url, headers=self.headers)
        data = response.json()
        stock_data = data.get('securities', {}).get('data', [])
        if not stock_data:
            return None, f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        columns = data['securities']['columns']
        try:
            name_index = columns.index('SHORTNAME')
            boardid_index = columns.index('BOARDID')
        except ValueError:
            return None, f"–ê–∫—Ü–∏—è {ticker}: –æ–¥–Ω–∞ –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö."

        for entry in stock_data:

            if len(entry) > name_index and entry[boardid_index] == "TQBR" and entry[name_index] is not None:
                return entry[name_index]
            elif len(entry) > name_index and entry[boardid_index] == "TQBR" and entry[name_index] is not None:
                return entry[name_index]
            elif len(entry) > name_index and entry[boardid_index] == "TQBR" and entry[name_index] is not None:
                return entry[name_index]

        return None, f"–ê–∫—Ü–∏—è {ticker}: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    def get_all_stocks_info(self, tickers):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º."""
        messages = []
        for ticker in tickers:
            stock_info = self.get_stock_info(ticker)
            messages.append(stock_info)
        return '\n'.join(messages)


if __name__ == "__main__":
    tiker = MoexAPI()
    print(tiker.get_all_stocks_info(["MTSS", "TATN", "SNGSP", "SBER", "GAZP"]))
